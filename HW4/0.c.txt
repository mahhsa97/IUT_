#include <mega32.h>

#include <delay.h>

#include <alcd.h>

#include <stdio.h>

#include <stdlib.h>

// Declare your global variables here

// Timer 0 overflow interrupt service routine


// Voltage Reference: AVCC pin
#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))

// Read the 8 most significant bits
// of the AD conversion result
unsigned char read_adc(unsigned char adc_input)
{
ADMUX=adc_input | ADC_VREF_TYPE;
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=(1<<ADSC);
// Wait for the AD conversion to complete
while ((ADCSRA & (1<<ADIF))==0);
ADCSRA|=(1<<ADIF);
return ADCH;
}
void Init();
void num2dot(char);
int t0 = 0,t1=0;
int temp;
float dama;
char bb[10];
char a , b;
char tempa[8];
char start = 0;
char com = 1;
char i= 0;
char f;    char j ;

char minn = 0;
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
    TCNT0 = -200;
    t0++;
    t1++;
    if(t0==500){
        lcd_clear();
        temp = read_adc(0);
        dama = 0.8 * temp - 55;
        ftoa(dama,2,bb);
        lcd_puts(bb);
        if (dama<0){dama *= -1;minn = 1;}
        f = dama;
        num2dot(f);
        for(j=2;j<7;j++){
            tempa[j-1]=tempa[j];
        }
        tempa[6] = 0;
        if (minn){tempa[7]+=32+64;minn = 0;} 
        t0=0; 
    
    }
    if(t1 == 1 && !start){
        PORTC = 0xFF;
        PORTA = tempa[i]*2;
        PORTC=com^0xFF;
        if (com == 128){com=1;}
        else{com*=2;}
        if(i == 7){i=0;}
        else{i++;}
        t1=0;
    }
}
void main(){
    Init();
    TCNT0=-200;
    temp = read_adc(0);
    dama = 0.8 * temp - 55;
    ftoa(dama,2,bb);
    lcd_puts(bb);
    if (dama<0){dama *= -1;minn = 1;}
    f = dama;
    num2dot(f);
    for(j=2;j<7;j++){
        tempa[j-1]=tempa[j];
    }
    tempa[6] = 0;
    if (minn){tempa[7]+=32+64;minn = 0;} 

    while(1){}

}
void num2dot(char d){
    a = d % 10;
    b = d / 10;
    start = 1;
    if(a == 1){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=1;
        tempa[3]=1;
        tempa[4]=1;
        tempa[5]=1;
        tempa[6]=1;
        tempa[7]=0;
    
    }
    if(a == 2){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=7;
        tempa[3]=1;
        tempa[4]=7;
        tempa[5]=4;
        tempa[6]=7;
        tempa[7]=0;
    
    }
    if(a == 3){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=7;
        tempa[3]=1;
        tempa[4]=7;
        tempa[5]=1;
        tempa[6]=7;
        tempa[7]=0;
    
    }
    if(a == 4){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=5;
        tempa[3]=5;
        tempa[4]=7;
        tempa[5]=1;
        tempa[6]=1;
        tempa[7]=0;
    
    }
    if(a == 5){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=7;
        tempa[3]=4;
        tempa[4]=7;
        tempa[5]=1;
        tempa[6]=7;
        tempa[7]=0;
    
    }
    if(a == 6){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=7;
        tempa[3]=4;
        tempa[4]=7;
        tempa[5]=5;
        tempa[6]=7;
        tempa[7]=0;
    
    }
    if(a == 7){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=7;
        tempa[3]=1;
        tempa[4]=1;
        tempa[5]=1;
        tempa[6]=1;
        tempa[7]=0;
    
    }
    if(a == 8){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=7;
        tempa[3]=5;
        tempa[4]=7;
        tempa[5]=5;
        tempa[6]=7;
        tempa[7]=0;
    
    }
    if(a == 9){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=7;
        tempa[3]=5;
        tempa[4]=7;
        tempa[5]=1;
        tempa[6]=7;
        tempa[7]=0;
    
    }
    if(a == 0){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]=7;
        tempa[3]=5;
        tempa[4]=5;
        tempa[5]=5;
        tempa[6]=7;
        tempa[7]=0;
    
    }
    if(b == 1){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]+=16*1;
        tempa[3]+=16*1;
        tempa[4]+=16*1;
        tempa[5]+=16*1;
        tempa[6]+=16*1;
        tempa[7]=0;
    
    }
    if(b == 2){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]+=16*7;
        tempa[3]+=16*1;
        tempa[4]+=16*7;
        tempa[5]+=16*4;
        tempa[6]+=16*7;
        tempa[7]=0;
    
    }
    if(b == 3){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]+=16*7;
        tempa[3]+=16*1;
        tempa[4]+=16*7;
        tempa[5]+=16*1;
        tempa[6]+=16*7;
        tempa[7]=0;
    
    }
    if(b == 4){
        tempa[0]=0;
        tempa[1]=0;
        tempa[2]+=16*5;
        tempa[3]+=16*5;
        tempa[4]+=16*7;
        tempa[5]+=16*1;
        tempa[6]+=16*1;
        tempa[7]=0;
    
    }
    if(b == 5){
        tempa[0]+=0;
        tempa[1]+=0;
        tempa[2]+=16*7;
        tempa[3]+=16*4;
        tempa[4]+=16*7;
        tempa[5]+=16*1;
        tempa[6]+=16*7;
        tempa[7]+=0;
    
    }
    if(b == 6){
        tempa[0]=0;
        tempa[1]+=0;
        tempa[2]+=16*7;
        tempa[3]+=16*4;
        tempa[4]+=16*7;
        tempa[5]+=16*5;
        tempa[6]+=16*8;
        tempa[7]+=0;
    
    }
    if(b == 7){
        tempa[0]+=0;
        tempa[1]+=0;
        tempa[2]+=7*16;
        tempa[3]+=1*16;
        tempa[4]+=1*16;
        tempa[5]+=1*16;
        tempa[6]+=1*16;
        tempa[7]+=0;
    
    }
    if(b == 8){
        tempa[0]+=0;
        tempa[1]+=0;
        tempa[2]+=7*16;
        tempa[3]+=5*16;
        tempa[4]+=7*16;
        tempa[5]+=5*16;
        tempa[6]+=7*16;
        tempa[7]+=0;
    
    }
    if(b == 9){
        tempa[0]+=0;
        tempa[1]+=0;
        tempa[2]+=7*16;
        tempa[3]+=5*16;
        tempa[4]+=7*16;
        tempa[5]+=1*16;
        tempa[6]+=7*16;
        tempa[7]+=0;
    
    }
    if(b == 0){
        tempa[0]+=0;
        tempa[1]+=0;
        tempa[2]+=0;
        tempa[3]+=0;
        tempa[4]+=0;
        tempa[5]+=0;
        tempa[6]+=0;
        tempa[7]+=0;
    
    }         
    
    start = 0;

}
void Init(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=In 
DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (0<<DDA0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=P 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (1<<PORTA0);

// Port B initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 1000.000 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
// Timer Period: 0.256 ms
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);

// ADC initialization
// ADC Clock frequency: 1000.000 kHz
// ADC Voltage Reference: AVCC pin
// ADC Auto Trigger Source: ADC Stopped
// Only the 8 most significant bits of
// the AD conversion result are used
ADMUX=ADC_VREF_TYPE;
ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTB Bit 0
// RD - PORTB Bit 1
// EN - PORTB Bit 2
// D4 - PORTB Bit 4
// D5 - PORTB Bit 5
// D6 - PORTB Bit 6
// D7 - PORTB Bit 7
// Characters/line: 16
lcd_init(32);

// Global enable interrupts
#asm("sei")

}
