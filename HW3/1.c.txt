#include<iostream>
#include<vector>
#include <string>

using namespace std;
class UFDS {
public:
	int numSets;
	vector<int> p, rank, size;

	UFDS(int n) {
		numSets = n;
		size.assign(n, 1);
		p.assign(n, 0);
		rank.assign(n, 1);
		for (int i = 0; i < n; i++) p[i] = i;
	}

	int findSet(int i);
	bool isSameSet(int i, int j);
	void unionSet(int i, int j);
	int SetSize(int i);
};
int UFDS::findSet(int i)
{
	if (p[i] == i)
	{
		return i;
	}

	return p[i] = findSet(p[i]);
}

bool UFDS::isSameSet(int i, int j)
{
	return (findSet(i) == findSet(j));
}
void UFDS::unionSet(int i, int j)
{
	int x = findSet(i);
	int y = findSet(j);
	if (!(isSameSet(i, j)))
	{
		numSets--;
		if (rank[x] > rank[y])
		{
			p[y] = x;
			size[x] += size[y];
		}
		else
		{
			p[x] = y;
			size[y] += size[x];
			if (rank[x] == rank[y])
			{
				rank[y]++;
			}
		}
	}
}

int UFDS::SetSize(int i)
{
	return size[findSet(i)];
}
int main()
{
	int n , i , j,s =0,uns=0;
	char c;
	cin >> n;
	UFDS sets(n);
	while (cin >> c >> i >> j)
	{
		i--;
		j--;
		if (c == 'c')
		{
			sets.unionSet(i, j);
		}
		else
		{
			if (sets.isSameSet(i,j))
			{
				s++;
			}
			else
			{
				uns++;
			}
		}
	}
	cout << s << "," << uns;
}