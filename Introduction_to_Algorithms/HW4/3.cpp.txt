#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
using namespace std;

typedef pair<int,int> pi;
typedef pair<pi,pi> pii;

int main() {
    int m , n ;
    cin>>m>>n;
    vector<vector<int> >frs (m+1,vector<int>(n+1));
    vector<vector<int> > sec (m+2,vector<int>(n+2,0));
    vector<vector<vector<int> > > visit(m+2, vector<vector<int> >(n+2,vector<int>(4,0)));
    for(int i = 1 ; i <=m ; i++) {
        for(int j = 1 ; j<=n;j++){
            cin>>frs[i][j];
            sec[i][j]=frs[i][j];
            if(frs[i][j]){
                sec[i-1][j-1]=1;
                sec[i-1][j]=1;
                //sec[i-1][j+1]=1;
                //sec[i+1][j-1]=1;
                //sec[i+1][j+1]=1;
                //sec[i+1][j]=1;
                sec[i][j-1]=1;
                //sec[i][j+1]=1;
            }
        }
    }
    for (int l = 1; l <=m ; ++l) {
        sec[l][n]=1;

    }
    for (int i1 = 1; i1 <=n ; ++i1) {
        sec[m][i1]=1;
    }
    for (int k = 0; k <=m+1 ; ++k) {
        for (int i = 0; i <=n+1 ; ++i) {
            if(k==0 || i == 0 || k == m+1||i==n+1){
                sec[k][i]=1;
            }
        }
    }
    int br,bc,er,ec;
    string bd;
    int intdir;
    cin>>br>>bc>>er>>ec>>bd;
    if(bd=="north") {
        intdir=0;
    }
    else if (bd=="east") {
        intdir = 1;
    }
    else if(bd=="south"){
        intdir=2;
    }
    else{
        intdir = 3;
    }
    queue<pii> bfs;
    pii tmp = make_pair(make_pair(br,bc),make_pair(intdir,0));
    bfs.push(tmp);
    int res = -1;
    if(!sec[br][bc]) {
        while (!bfs.empty()) {
            pii intmp = bfs.front();
            bfs.pop();
            if (intmp.first.first == er && intmp.first.second == ec) {
                res = intmp.second.second;
                break;
            } else {
                if (intmp.second.first == 0) {
                    for (int i = 1; i <= 3; i++) {
                        if (intmp.first.first - i >= 1 && !sec[intmp.first.first - i][intmp.first.second]) {
                            if(!visit[intmp.first.first - i][intmp.first.second][intmp.second.first]){
                                bfs.push(make_pair(make_pair(intmp.first.first - i, intmp.first.second),
                                                   make_pair(intmp.second.first, intmp.second.second + 1)));
                                visit[intmp.first.first - i][intmp.first.second][intmp.second.first]=1;
                            }

                        } else {
                            break;
                        }
                    }
                } else if (intmp.second.first == 1) {
                    for (int i = 1; i <= 3; i++) {
                        if (intmp.first.second + i <= n && !sec[intmp.first.first][intmp.first.second + i]) {
                            if(!visit[intmp.first.first ][intmp.first.second+i][intmp.second.first]){
                                bfs.push(make_pair(make_pair(intmp.first.first , intmp.first.second+i),
                                                   make_pair(intmp.second.first, intmp.second.second + 1)));
                                visit[intmp.first.first ][intmp.first.second+i][intmp.second.first]=1;
                            }
                        } else {
                            break;
                        }
                    }
                } else if (intmp.second.first == 2) {
                    for (int i = 1; i <= 3; i++) {
                        if (intmp.first.first + i <= m && !sec[intmp.first.first + i][intmp.first.second] ){
                            if(!visit[intmp.first.first + i][intmp.first.second][intmp.second.first]){
                                bfs.push(make_pair(make_pair(intmp.first.first + i, intmp.first.second),
                                                   make_pair(intmp.second.first, intmp.second.second + 1)));
                                visit[intmp.first.first + i][intmp.first.second][intmp.second.first]=1;
                            }
                        } else {
                            break;
                        }
                    }
                } else {
                    for (int i = 1; i <= 3; i++) {
                        if (intmp.first.second - i >= 1 && !sec[intmp.first.first][intmp.first.second - i] ) {
                            if(!visit[intmp.first.first ][intmp.first.second-i][intmp.second.first]){
                                bfs.push(make_pair(make_pair(intmp.first.first , intmp.first.second-i),
                                                   make_pair(intmp.second.first, intmp.second.second + 1)));
                                visit[intmp.first.first ][intmp.first.second-i][intmp.second.first]=1;

                            }
                        } else {
                            break;
                        }
                    }
                }
                if (!visit[intmp.first.first][intmp.first.second][(intmp.second.first+ 1) % 4 ]) {
                    bfs.push(make_pair(make_pair(intmp.first.first, intmp.first.second),
                                       make_pair((intmp.second.first+1) % 4 , intmp.second.second + 1)));
                    visit[intmp.first.first][intmp.first.second][(intmp.second.first+1)%4 ]=1;
                }
                if (!visit[intmp.first.first][intmp.first.second][(intmp.second.first + 3) % 4 ]) {
                    bfs.push(make_pair(make_pair(intmp.first.first, intmp.first.second),
                                       make_pair((intmp.second.first + 3) % 4 , intmp.second.second + 1)));
                    visit[intmp.first.first][intmp.first.second][(intmp.second.first+3)%4 ]=1;
                }
                if(!visit[intmp.first.first][intmp.first.second][(intmp.second.first+2)%4 ]){
                    bfs.push(make_pair(make_pair(intmp.first.first,intmp.first.second),make_pair((intmp.second.first+2)%4  ,intmp.second.second +2)));
                    visit[intmp.first.first][intmp.first.second][(intmp.second.first+2)%4 ]=1;
                }
            }
        }
    }
    cout<<res;
    return 0;
}